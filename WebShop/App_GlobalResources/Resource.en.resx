<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>accept</value>
  </data>
  <data name="AddToCart" xml:space="preserve">
    <value>Add to cart</value>
  </data>
  <data name="Admin" xml:space="preserve">
    <value>Administration</value>
  </data>
  <data name="AllProducts" xml:space="preserve">
    <value>All products</value>
  </data>
  <data name="Availability" xml:space="preserve">
    <value>Availability</value>
  </data>
  <data name="BlockqouteDressFor" xml:space="preserve">
    <value>More than 100 world-famous labels, including his own line of Fashion. As well as daily tips on style and fashion news.</value>
  </data>
  <data name="BlockqouteDressForTitle" xml:space="preserve">
    <value>YOUR FAVORITE BRANDS
UNDER THE SAME ROOF</value>
  </data>
  <data name="BuyNow" xml:space="preserve">
    <value>buy now</value>
  </data>
  <data name="CarouselTitle" xml:space="preserve">
    <value>A collection of stylish dresses</value>
  </data>
  <data name="Cart" xml:space="preserve">
    <value>Cart</value>
  </data>
  <data name="CartItems" xml:space="preserve">
    <value>There is {0} item in your cart</value>
  </data>
  <data name="CartNoItems" xml:space="preserve">
    <value>Your cart is empty</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>сategory</value>
  </data>
  <data name="ClearFilter" xml:space="preserve">
    <value>clear filter</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>color</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="CurrencyUAH" xml:space="preserve">
    <value>Ukraine Hryvna - UAH</value>
  </data>
  <data name="CurrencyUSD" xml:space="preserve">
    <value>Dollar - USD</value>
  </data>
  <data name="CurrentLang" xml:space="preserve">
    <value>en</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="DressFor" xml:space="preserve">
    <value>dress for</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>filter</value>
  </data>
  <data name="FilterPriceMore" xml:space="preserve">
    <value>and more &lt;b class='color-h'&gt; {{{{(items|countPrice:{0}:{1}).length}}}}&lt;/b&gt;</value>
  </data>
  <data name="ForMan" xml:space="preserve">
    <value>man</value>
  </data>
  <data name="ForWoman" xml:space="preserve">
    <value>woman</value>
  </data>
  <data name="GoView" xml:space="preserve">
    <value>view</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="InStock" xml:space="preserve">
    <value>In stock</value>
  </data>
  <data name="IsMan" xml:space="preserve">
    <value>Man</value>
  </data>
  <data name="IsWoman" xml:space="preserve">
    <value>Woman</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LatestPosts" xml:space="preserve">
    <value>Latest posts</value>
  </data>
  <data name="LogIn" xml:space="preserve">
    <value>Log In</value>
  </data>
  <data name="LogOff" xml:space="preserve">
    <value>Log Off</value>
  </data>
  <data name="Main" xml:space="preserve">
    <value>main</value>
  </data>
  <data name="MoreUs" xml:space="preserve">
    <value>More about us</value>
  </data>
  <data name="NewGoods" xml:space="preserve">
    <value>New Arrivals</value>
  </data>
  <data name="NotInStock" xml:space="preserve">
    <value>Not in stock</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ProductShop" xml:space="preserve">
    <value>Products in shop</value>
  </data>
  <data name="Qty" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="RandProd" xml:space="preserve">
    <value>random products</value>
  </data>
  <data name="ReadMore" xml:space="preserve">
    <value>Read more</value>
  </data>
  <data name="RecentlyViewed" xml:space="preserve">
    <value>Recently Viewed Products</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="Russian" xml:space="preserve">
    <value>Russian</value>
  </data>
  <data name="ShopOpt" xml:space="preserve">
    <value>Shopping Options</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>size</value>
  </data>
  <data name="SortBy" xml:space="preserve">
    <value>sort by</value>
  </data>
  <data name="SortByNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="SortByNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="SortByPriceAsc" xml:space="preserve">
    <value>Price ascending</value>
  </data>
  <data name="SortByPriceDesc" xml:space="preserve">
    <value>Price descending </value>
  </data>
  <data name="ToUp" xml:space="preserve">
    <value>to up</value>
  </data>
</root>